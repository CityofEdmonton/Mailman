// <auto-generated />
using System;
using Mailman.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mailman.Services.Migrations
{
    [DbContext(typeof(MergeTemplateContext))]
    [Migration("20191115212646_NetCore30")]
    partial class NetCore30
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Mailman.Services.Data.MergeTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Conditional")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HeaderRowNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpreadSheetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MergeTemplates");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MergeTemplate");
                });

            modelBuilder.Entity("Mailman.Services.Data.SpreadsheetInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportDateUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SpreadSheets");
                });

            modelBuilder.Entity("Mailman.Services.Data.EmailMergeTemplate", b =>
                {
                    b.HasBaseType("Mailman.Services.Data.MergeTemplate");

                    b.HasDiscriminator().HasValue("EmailMergeTemplate");
                });

            modelBuilder.Entity("Mailman.Services.Data.MergeTemplate", b =>
                {
                    b.OwnsOne("Mailman.Services.Data.TimestampColumn", "TimestampColumn", b1 =>
                        {
                            b1.Property<string>("MergeTemplateId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("ShouldPrefixNameWithMergeTemplateTitle")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Title")
                                .HasColumnType("TEXT");

                            b1.HasKey("MergeTemplateId");

                            b1.ToTable("MergeTemplates");

                            b1.WithOwner()
                                .HasForeignKey("MergeTemplateId");
                        });
                });

            modelBuilder.Entity("Mailman.Services.Data.EmailMergeTemplate", b =>
                {
                    b.OwnsOne("Mailman.Services.Data.EmailTemplate", "EmailTemplate", b1 =>
                        {
                            b1.Property<string>("EmailMergeTemplateId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Bcc")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Body")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Cc")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Subject")
                                .HasColumnType("TEXT");

                            b1.Property<string>("To")
                                .HasColumnType("TEXT");

                            b1.HasKey("EmailMergeTemplateId");

                            b1.ToTable("MergeTemplates1");

                            b1.WithOwner()
                                .HasForeignKey("EmailMergeTemplateId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
